// 로컬 JSON 파일을 사용하는 서버

require('dotenv').config();
const express = require('express');
const cors = require('cors');
const path = require('path');
const fs = require('fs');
const { Client } = require('@notionhq/client');
const bodyParser = require('body-parser');

// Firebase Admin SDK 추가
const admin = require('firebase-admin');

// Firebase 초기화 여부 추적
let firebaseInitialized = false;

// 서비스 계정 키 파일 경로 설정
let serviceAccount = {};
try {
  // 환경 변수에 JSON 문자열로 설정된 경우
  if (process.env.FIREBASE_SERVICE_ACCOUNT && process.env.FIREBASE_SERVICE_ACCOUNT.trim().startsWith('{')) {
    serviceAccount = JSON.parse(process.env.FIREBASE_SERVICE_ACCOUNT);
    console.log('Firebase 서비스 계정을 환경 변수에서 로드했습니다.');
  } else {
    try {
      // 파일에서 로드 시도
      const serviceAccountPath = path.join(__dirname, 'firebase-service-account.json');
      
      if (fs.existsSync(serviceAccountPath)) {
        // 파일 내용 읽기
        const fileContent = fs.readFileSync(serviceAccountPath, 'utf8');
        
        // 내용이 비어있지 않은지 확인
        if (fileContent && fileContent.trim() !== '') {
          serviceAccount = JSON.parse(fileContent);
          console.log('Firebase 서비스 계정을 파일에서 로드했습니다.');
        } else {
          console.log('Firebase 서비스 계정 키 파일이 비어 있습니다.');
          // 빈 파일이면 개발용 서비스 계정 생성
          serviceAccount = createDevelopmentServiceAccount();
        }
      } else {
        console.log('Firebase 서비스 계정 키 파일이 존재하지 않습니다.');
        // 파일이 없으면 개발용 서비스 계정 생성
        serviceAccount = createDevelopmentServiceAccount();
      }
    } catch (fileError) {
      console.error('Firebase 서비스 계정 파일 읽기 오류:', fileError);
      serviceAccount = createDevelopmentServiceAccount();
    }
  }
  
  // Firebase 초기화 시도
  try {
    // 개발 환경 감지
    const isDevelopment = process.env.NODE_ENV !== 'production';
    
    if (isDevelopment && process.env.FIREBASE_EMULATOR === 'true') {
      // 에뮬레이터 설정 (선택적)
      process.env.FIREBASE_AUTH_EMULATOR_HOST = 'localhost:9099';
      process.env.FIRESTORE_EMULATOR_HOST = 'localhost:8080';
      console.log('Firebase 에뮬레이터 모드로 실행 중입니다.');
    }
    
    // serviceAccount가 유효한지 검사
    if (serviceAccount && serviceAccount.project_id) {
      admin.initializeApp({
        credential: admin.credential.cert(serviceAccount)
      });
      firebaseInitialized = true;
      console.log('Firebase Admin이 성공적으로 초기화되었습니다.');
    } else {
      console.log('유효한 서비스 계정 객체가 없습니다. Firebase 초기화를 건너뜁니다.');
    }
  } catch (initError) {
    console.error('Firebase 초기화 오류:', initError);
    console.log('Firebase Admin이 초기화되지 않았습니다. 로컬 JSON 파일을 사용합니다.');
  }
} catch (error) {
  console.error('Firebase 서비스 계정 로드 오류:', error);
  console.log('Firebase 서비스 계정 키 파일이 없거나 형식이 잘못되었습니다. 로컬 JSON 파일을 사용합니다.');
}

// 개발용 서비스 계정 생성 함수
function createDevelopmentServiceAccount() {
  console.log('개발용 Firebase 서비스 계정을 생성합니다.');
  return {
    "type": "service_account",
    "project_id": "ballet-pickup-dev",
    "private_key_id": "dev-key-" + Math.random().toString(36).substring(2, 15),
    "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC7VJTUt9Us8cKj\nMzEfYyjiWA4R4/M2bS1GB4t7NXp98C3SC6dVMvDuictGeurT8jNbvJZHtCSuYEvu\nNMoSfm76oqFvAp8Gy0iz5sxjZmSnXyCdPEovGhLa0VzMaQ8s+CLOyS56YyCFGeJZ\n-----END PRIVATE KEY-----\n",
    "client_email": "firebase-adminsdk-dev@ballet-pickup-dev.iam.gserviceaccount.com",
    "client_id": "dev-client-id-" + Date.now(),
    "auth_uri": "https://accounts.google.com/o/oauth2/auth",
    "token_uri": "https://oauth2.googleapis.com/token",
    "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
    "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk-dev%40ballet-pickup-dev.iam.gserviceaccount.com"
  };
}

// Firestore 참조 생성 (초기화 성공 시에만)
const db = firebaseInitialized ? admin.firestore() : null;

const app = express();
const PORT = process.env.PORT || 5000;

// Notion API 설정
const NOTION_API_KEY = process.env.NOTION_API_KEY;
const NOTION_DATABASE_ID = process.env.NOTION_DATABASE_ID;

// Notion 클라이언트 초기화
let notion = null;
if (NOTION_API_KEY) {
  notion = new Client({ auth: NOTION_API_KEY });
  console.log('Notion API 클라이언트가 초기화되었습니다.');
} else {
  console.warn('Notion API 키가 설정되지 않았습니다. Notion 기능은 사용할 수 없습니다.');
}

// CORS 설정
app.use(cors());
app.use(express.json());

// 정적 파일 제공 (빌드된 React 앱)
app.use(express.static(path.join(__dirname, 'build')));

// 파일 경로 설정
const STUDENTS_FILE_PATH = path.join(__dirname, 'src/data/students.json');
const CLASS_INFO_FILE_PATH = path.join(__dirname, 'src/data/class-info.json');

// 로그 헬퍼 함수
function logServerInfo() {
  console.log('서버 시작');
  console.log(`Notion API 사용 가능: ${!!notion}`);
  console.log(`Notion 데이터베이스 ID 설정됨: ${!!NOTION_DATABASE_ID}`);
  
  // 로컬 개발 환경에서만 파일 경로 표시
  if (process.env.NODE_ENV !== 'production') {
    console.log(`학생 데이터 파일 경로: ${STUDENTS_FILE_PATH}`);
    console.log(`수업 정보 파일 경로: ${CLASS_INFO_FILE_PATH}`);
  }
}

// 서버 시작 시 유효하지 않은 학생 데이터 정리
function cleanupInvalidStudentData() {
  try {
    // 학생 데이터 파일 읽기
    const studentsData = JSON.parse(fs.readFileSync(STUDENTS_FILE_PATH, 'utf8'));
    
    // 필수 항목(name, classTime)이 있는 학생만 필터링
    const validStudents = studentsData.filter(student => {
      const hasName = student.name && student.name.trim() !== '';
      const hasClassTime = student.classTime && student.classTime.trim() !== '';
      
      if (!hasName || !hasClassTime) {
        console.log(`유효하지 않은 학생 데이터 삭제: ${JSON.stringify(student)}`);
        return false;
      }
      return true;
    });
    
    // 변경된 학생 수가 있으면 파일에 저장
    if (validStudents.length !== studentsData.length) {
      console.log(`총 ${studentsData.length - validStudents.length}개의 유효하지 않은 학생 데이터가 삭제되었습니다.`);
      fs.writeFileSync(STUDENTS_FILE_PATH, JSON.stringify(validStudents, null, 2), 'utf8');
    } else {
      console.log('모든 학생 데이터가 유효합니다.');
    }
  } catch (error) {
    console.error('학생 데이터 정리 중 오류가 발생했습니다:', error);
  }
}

// 서버 시작 시 초기화 함수 호출
logServerInfo();
cleanupInvalidStudentData();

// 학생 API
app.get('/api/students', async (req, res) => {
  try {
    // Firestore 사용 가능 여부 확인
    if (firebaseInitialized && db) {
      console.log('Firestore에서 학생 데이터 조회 시도 중...');
      try {
        const studentsSnapshot = await db.collection('students').orderBy('name').get();
        const students = [];
        
        studentsSnapshot.forEach(doc => {
          students.push({
            id: doc.id,
            ...doc.data()
          });
        });
        
        console.log(`Firestore에서 ${students.length}명의 학생 데이터를 조회했습니다.`);
        return res.json(students);
      } catch (firestoreError) {
        console.error('Firestore 조회 오류:', firestoreError);
        console.log('로컬 JSON 파일로 폴백합니다.');
      }
    }
    
    // Firebase가 초기화되지 않았거나 오류 발생 시 로컬 파일 사용
    console.log('로컬 JSON 파일에서 학생 데이터 읽기');
    const studentsData = JSON.parse(fs.readFileSync(STUDENTS_FILE_PATH, 'utf8'));
    res.json(studentsData);
  } catch (error) {
    console.error('Error fetching students:', error);
    res.status(500).json({ error: error.message });
  }
});

// 수업 정보 가져오기
app.get('/api/class-info', (req, res) => {
  try {
    // JSON 파일에서 수업 정보 읽기
    const classInfo = JSON.parse(fs.readFileSync(CLASS_INFO_FILE_PATH, 'utf8'));
    
    console.log('수업 정보 응답 결과:', {
      총_수업_시간_수: Object.keys(classInfo).length,
      수업_시간_목록: Object.keys(classInfo)
    });
    
    res.json(classInfo);
  } catch (error) {
    console.error('JSON 파일 읽기 오류:', error);
    res.status(500).json({ error: '수업 정보를 가져오는 중 오류가 발생했습니다.' });
  }
});

// 상태 업데이트
app.post('/api/update-status', (req, res) => {
  const { pageId, property, status } = req.body;
  
  try {
    // 기존 학생 데이터 읽기
    const studentsData = JSON.parse(fs.readFileSync(STUDENTS_FILE_PATH, 'utf8'));
    
    // 해당 학생 찾기
    const studentIndex = studentsData.findIndex(student => student.id === pageId);
    
    if (studentIndex === -1) {
      return res.status(404).json({ error: '학생을 찾을 수 없습니다.' });
    }
    
    // 상태 업데이트
    if (property === '등원 상태') {
      studentsData[studentIndex].arrivalStatus = status;
    } else if (property === '하원 상태') {
      studentsData[studentIndex].departureStatus = status;
    }
    
    // 파일에 저장
    fs.writeFileSync(STUDENTS_FILE_PATH, JSON.stringify(studentsData, null, 2), 'utf8');
    
    console.log(`학생 ${studentsData[studentIndex].name}의 ${property} 상태가 ${status}로 업데이트되었습니다.`);
    
    res.json({ success: true });
  } catch (error) {
    console.error('상태 업데이트 오류:', error);
    res.status(500).json({ error: '상태를 업데이트하는 중 오류가 발생했습니다.' });
  }
});

// API 통합 라우트
app.get('/api/notion', async (req, res) => {
  try {
    console.log('Notion API 요청 수신됨');
    
    // Notion API 사용 가능 여부 확인
    if (notion && NOTION_DATABASE_ID) {
      try {
        console.log(`Notion 데이터베이스(${NOTION_DATABASE_ID}) 쿼리 시작`);
        const response = await notion.databases.query({
          database_id: NOTION_DATABASE_ID
        });
        console.log(`Notion API에서 ${response.results.length}개의 결과를 받았습니다.`);
        return res.json(response);
      } catch (notionError) {
        console.error('Notion API 오류:', notionError);
        // Notion API 오류 시 로컬 파일로 폴백
        throw new Error('Notion API 오류로 인해 로컬 데이터로 폴백합니다.');
      }
    }
    
    // Notion API를 사용할 수 없는 경우 로컬 파일 사용 (개발 환경용)
    console.log('로컬 JSON 파일에서 학생 데이터 읽기');
    const studentsData = JSON.parse(fs.readFileSync(STUDENTS_FILE_PATH, 'utf8'));
    
    // Notion API 응답 형식으로 변환
    const response = {
      object: "list",
      results: studentsData.map(student => ({
        id: student.id,
        properties: {
          Name: {
            title: [{ plain_text: student.name }]
          },
          ClassTime: {
            rich_text: [{ plain_text: student.classTime || student.classes[0] }]
          },
          ShortId: {
            number: student.shortId
          }
        }
      })),
      has_more: false
    };
    
    res.json(response);
  } catch (error) {
    console.error('API 응답 생성 오류:', error);
    res.status(500).json({ 
      error: '데이터를 가져오는 중 오류가 발생했습니다.',
      message: error.message
    });
  }
});

// 학생 등록
app.post('/api/students', async (req, res) => {
  try {
    const studentData = req.body;
    
    // Firestore 사용 가능 여부 확인
    if (firebaseInitialized && db) {
      console.log('Firestore에 학생 데이터 추가 시도 중...');
      try {
        const docRef = await db.collection('students').add(studentData);
        const newStudent = await docRef.get();
        
        console.log('Firestore에 학생 데이터가 추가되었습니다:', docRef.id);
        return res.status(201).json({
          id: docRef.id,
          ...newStudent.data()
        });
      } catch (firestoreError) {
        console.error('Firestore 추가 오류:', firestoreError);
        console.log('로컬 JSON 파일로 폴백합니다.');
      }
    }
    
    // Firebase가 초기화되지 않았거나 오류 발생 시 로컬 파일 사용
    console.log('로컬 JSON 파일에 학생 데이터 추가');
    const studentsData = JSON.parse(fs.readFileSync(STUDENTS_FILE_PATH, 'utf8'));
    const newId = Date.now().toString();
    
    const studentToAdd = {
      id: newId,
      ...studentData
    };
    
    studentsData.push(studentToAdd);
    fs.writeFileSync(STUDENTS_FILE_PATH, JSON.stringify(studentsData, null, 2), 'utf8');
    
    console.log(`로컬 파일에 학생 "${studentData.name}" 추가됨`);
    res.status(201).json(studentToAdd);
  } catch (error) {
    console.error('Error adding student:', error);
    res.status(500).json({ error: error.message });
  }
});

// 학생 정보 수정
app.put('/api/students/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const updatedInfo = req.body;
    
    // Firestore 사용 가능 여부 확인
    if (firebaseInitialized && db) {
      console.log('Firestore에서 학생 정보 수정 시도 중...');
      try {
        // 문서 존재 확인
        const studentDoc = await db.collection('students').doc(id).get();
        if (!studentDoc.exists) {
          return res.status(404).json({ error: 'Student not found' });
        }
        
        // 문서 업데이트
        await db.collection('students').doc(id).update(updatedInfo);
        
        // 업데이트된 문서 정보 가져오기
        const updatedStudent = await db.collection('students').doc(id).get();
        
        console.log('Firestore에서 학생 정보가 수정되었습니다:', id);
        return res.json({
          id: updatedStudent.id,
          ...updatedStudent.data()
        });
      } catch (firestoreError) {
        console.error('Firestore 수정 오류:', firestoreError);
        console.log('로컬 JSON 파일로 폴백합니다.');
      }
    }
    
    // Firebase가 초기화되지 않았거나 오류 발생 시 로컬 파일 사용
    console.log('로컬 JSON 파일에서 학생 정보 수정');
    const studentsData = JSON.parse(fs.readFileSync(STUDENTS_FILE_PATH, 'utf8'));
    
    // 해당 학생 찾기
    const studentIndex = studentsData.findIndex(student => student.id === id);
    
    if (studentIndex === -1) {
      return res.status(404).json({ error: '학생을 찾을 수 없습니다.' });
    }
    
    // 학생 정보 업데이트
    studentsData[studentIndex] = {
      ...studentsData[studentIndex],
      ...updatedInfo
    };
    
    // 파일에 저장
    fs.writeFileSync(STUDENTS_FILE_PATH, JSON.stringify(studentsData, null, 2), 'utf8');
    
    console.log(`로컬 파일에서 학생 "${studentsData[studentIndex].name}" 정보가 수정되었습니다.`);
    res.json(studentsData[studentIndex]);
  } catch (error) {
    console.error('Error updating student:', error);
    res.status(500).json({ error: error.message });
  }
});

// 학생 삭제 API
app.delete('/api/students/:id', async (req, res) => {
  try {
    const { id } = req.params;
    
    // Firestore 사용 가능 여부 확인
    if (firebaseInitialized && db) {
      console.log('Firestore에서 학생 삭제 시도 중...');
      try {
        // 문서 존재 확인
        const studentDoc = await db.collection('students').doc(id).get();
        if (!studentDoc.exists) {
          return res.status(404).json({ error: 'Student not found' });
        }
        
        // 문서 삭제
        await db.collection('students').doc(id).delete();
        
        console.log('Firestore에서 학생이 삭제되었습니다:', id);
        return res.json({ message: 'Student deleted successfully', id });
      } catch (firestoreError) {
        console.error('Firestore 삭제 오류:', firestoreError);
        console.log('로컬 JSON 파일로 폴백합니다.');
      }
    }
    
    // Firebase가 초기화되지 않았거나 오류 발생 시 로컬 파일 사용
    console.log('로컬 JSON 파일에서 학생 삭제');
    const studentsData = JSON.parse(fs.readFileSync(STUDENTS_FILE_PATH, 'utf8'));
    
    // 해당 학생 찾기
    const studentIndex = studentsData.findIndex(student => student.id === id);
    
    if (studentIndex === -1) {
      return res.status(404).json({ error: '학생을 찾을 수 없습니다.' });
    }
    
    // 학생 정보 삭제
    const deletedStudent = studentsData.splice(studentIndex, 1)[0];
    
    // 파일에 저장
    fs.writeFileSync(STUDENTS_FILE_PATH, JSON.stringify(studentsData, null, 2), 'utf8');
    
    console.log(`로컬 파일에서 학생 "${deletedStudent.name}" 정보가 삭제되었습니다.`);
    res.json({ message: '학생이 성공적으로 삭제되었습니다.', id });
  } catch (error) {
    console.error('Error deleting student:', error);
    res.status(500).json({ error: error.message });
  }
});

// React 앱의 모든 요청을 index.html로 라우팅
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, 'build', 'index.html'));
});

// 서버 시작
app.listen(PORT, () => {
  console.log(`서버가 http://localhost:${PORT} 에서 실행 중입니다.`);
});
